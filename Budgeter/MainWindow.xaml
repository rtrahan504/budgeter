<Window x:Class="Budgeter.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Budgeter"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="{Binding DynamicTitle, RelativeSource={RelativeSource Mode=Self}}"
        Height="550" Width="900" 
        Closing="Window_Closing" 
        SourceInitialized="Window_SourceInitialized"
        Foreground="{DynamicResource Foreground}"
        Background="{DynamicResource Background}"
        DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Selen.Wpf.SystemStyles;component/Styles.xaml"/>
                <ResourceDictionary Source="MainWindowStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="GetEnumValues_RecurrenceInterval">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="local:RecurrenceIntervals"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <local:DoublePositive x:Key="DoublePositive"/>
            <local:DoubleNegative x:Key="DoubleNegative"/>
            <local:DateConverter x:Key="DateConverter"/>
            <local:ZoomConverter x:Key="ZoomConverter"/>
        </ResourceDictionary>

    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" Grid.Column="0" Background="{DynamicResource Background}" Margin="5">
            <Menu.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Menu.ItemsPanel>
            <MenuItem Header="_File">
                <MenuItem Header="_New" Tag="File_New" Click="OnMenuClick" Icon="{StaticResource Icon_NewFile}"/>
                <MenuItem Header="_Open..." Tag="File_Open" Click="OnMenuClick" InputGestureText="Ctrl+O" Icon="{StaticResource Icon_OpenFile}"/>
                <MenuItem Header="_Save" Tag="File_Save" Click="OnMenuClick" InputGestureText="Ctrl+S" Icon="{StaticResource Icon_Save}"/>
                <MenuItem Header="Save As..." Tag="File_SaveAs" Click="OnMenuClick" Icon="{StaticResource Icon_SaveAs}"/>
                <Separator/>
                <MenuItem Header="_Exit" Tag="Program_Exit" Click="OnMenuClick" Icon="{StaticResource Icon_Exit}"/>
            </MenuItem>
            <MenuItem Header="_Account">
                <MenuItem Tag="Account_NewAccount" Header="New Account" Click="OnMenuClick"/>
                <MenuItem Tag="Account_DeleteAccount" Header="Delete Account" Click="OnMenuClick"/>
            </MenuItem>
            <MenuItem Header="_Balance Sheet">
                <MenuItem Tag="BalanceSheet_Refresh" Header="_Refresh" Click="OnMenuClick" Icon="{StaticResource Icon_Refresh}"/>
                <Separator/>
                <MenuItem Tag="BalanceSheet_NewCharge" Header="New Charge" Click="OnMenuClick"/>
                <MenuItem Tag="BalanceSheet_NewBalanceOverride" Header="New Balance Override" Click="OnMenuClick"/>
                <MenuItem Tag="BalanceSheet_Activate" Click="OnMenuClick" Header="Activate Transaction"/>
                <MenuItem Tag="BalanceSheet_Deactivate" Click="OnMenuClick" Header="Deactivate Transaction"/>
                <MenuItem Tag="BalanceSheet_Delete" Click="OnMenuClick" Header="Delete Transaction"/>
                <MenuItem Tag="BalanceSheet_ResetAmount" Click="OnMenuClick" Header="Reset Amount"/>
            </MenuItem>
            <MenuItem Header="_Recurring Transactions">
                <MenuItem Tag="RecurringTransactions_New" Click="OnMenuClick" Header="New Recurring Transaction"/>
                <MenuItem Tag="RecurringTransactions_Delete" Click="OnMenuClick" Header="Delete Recurring Transaction"/>
            </MenuItem>
            <MenuItem Header="_About" Tag="About" Click="OnMenuClick"/>
        </Menu>
        <Grid Margin="5,0" Name="Grid_BalanceSheet" Grid.Row="1">
            <Grid.LayoutTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="{Binding ElementName=m_Slider_Name, Path=Value, Converter={StaticResource ZoomConverter}}" ScaleY="{Binding ElementName=m_Slider_Name, Path=Value, Converter={StaticResource ZoomConverter}}"/>
                </TransformGroup>
            </Grid.LayoutTransform>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Border Grid.Column="0" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                <DockPanel>
                    <Label DockPanel.Dock="Top" Foreground="{DynamicResource Foreground}" Background="{DynamicResource CloseButtonBackgroundPressed}">Accounts</Label>
                    <Grid DockPanel.Dock="Bottom">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" VerticalContentAlignment="Center" Foreground="{DynamicResource Foreground}">Today's Total:</Label>
                        <Label x:Name="label_AccountTotal" Grid.Column="1" VerticalContentAlignment="Center" Foreground="{DynamicResource Foreground}" ContentStringFormat="{}{0:C2}"/>
                    </Grid>
                    <DataGrid x:Name="dataGrid_Accounts" DockPanel.Dock="Top" Foreground="{DynamicResource Foreground}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" IsReadOnly="False" SelectionMode="Single" SelectionUnit="FullRow" BorderBrush="{x:Null}" VerticalContentAlignment="Stretch" SelectionChanged="DataGrid_Accounts_SelectionChanged" BorderThickness="0,0,0,0" HeadersVisibility="Column" GridLinesVisibility="All">
                        <DataGrid.CellStyle>
                            <Style TargetType="{x:Type DataGridCell}">
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}"/>
                                        <Setter Property="Foreground" Value="{x:Static SystemColors.HighlightTextBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.CellStyle>
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Name}" Header="Name" Width="*"/>
                            <DataGridTextColumn Binding="{Binding Balance, StringFormat={}{0:C2}}" Header="Balance" Width="*" IsReadOnly="True"/>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Tag="Account_NewAccount" Header="New Account" Click="OnMenuClick"/>
                                <MenuItem Tag="Account_DeleteAccount" Header="Delete Account" Click="OnMenuClick"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </DockPanel>
            </Border>
            <GridSplitter Width="5" HorizontalAlignment="Stretch" Grid.Column="1" Background="{DynamicResource Background}"/>
            <Border Grid.Column="2" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                <DockPanel>
                    <Label DockPanel.Dock="Top" Foreground="{DynamicResource Foreground}" Background="{DynamicResource CloseButtonBackgroundPressed}">Account Balance Sheet</Label>
                    <DataGrid Name="dataGrid_Balance" ItemsSource="{Binding ElementName=dataGrid_Accounts, Path=SelectedItem.Entries, Mode=OneWay}" Foreground="{DynamicResource Foreground}" DockPanel.Dock="Top" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" SelectionChanged="DataGrid_Balance_SelectionChanged" SelectionMode="Extended" SelectionUnit="FullRow" CellEditEnding="DataGrid_Balance_CellEditEnding" BeginningEdit="DataGrid_Balance_BeginningEdit" CanUserSortColumns="True" BorderBrush="{x:Null}" BorderThickness="0,0,0,0" HeadersVisibility="Column" GridLinesVisibility="All">
                        <DataGrid.CellStyle>
                            <Style TargetType="{x:Type DataGridCell}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Type}" Value="Today">
                                        <Setter Property="Background" Value="#000055"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}"/>
                                        <Setter Property="Foreground" Value="{x:Static SystemColors.HighlightTextBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.CellStyle>
                        <DataGrid.Columns>
                            <DataGridCheckBoxColumn x:Name="BalanceEnabledColumn" Binding="{Binding Enabled}" Header="Enabled"/>
                            <DataGridTemplateColumn x:Name="BalanceDateColumn" Header="Date" SortMemberPath="Date">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Date, Converter={StaticResource DateConverter}}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.CellEditingTemplate>
                                    <DataTemplate>
                                        <DatePicker SelectedDate="{Binding Date}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellEditingTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn x:Name="BalanceNameColumn" Binding="{Binding Name}" Header="Name"/>
                            <DataGridTextColumn x:Name="BalanceTypeColumn" Binding="{Binding Type}" Header="Type" IsReadOnly="True"/>
                            <DataGridTextColumn x:Name="BalanceAmountColumn" Binding="{Binding Amount, StringFormat={}{0:C2}}" Header="Amount">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="HorizontalAlignment" Value="Right"/>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Amount, Converter={StaticResource DoublePositive}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Background" Value="#007700"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Amount, Converter={StaticResource DoubleNegative}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Background" Value="#770000"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Type}" Value="Today">
                                                <Setter Property="Background" Value="#000055"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Type}" Value="Balance Override">
                                                <Setter Property="Background" Value="#777700"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn x:Name="BalanceBalanceColumn" Binding="{Binding Balance, StringFormat={}{0:C2}}" Header="Balance" IsReadOnly="True">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Balance, Converter={StaticResource DoublePositive}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Background" Value="#007700"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Balance, Converter={StaticResource DoublePositive}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                                <Setter Property="Background" Value="#770000"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Type}" Value="Balance Override">
                                                <Setter Property="Background" Value="#777700"/>
                                                <Setter Property="Foreground" Value="#ffffff"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Width="*" IsReadOnly="True" CanUserSort="False"></DataGridTextColumn>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Tag="BalanceSheet_NewCharge" Header="New Charge" Click="OnMenuClick"/>
                                <MenuItem Tag="BalanceSheet_NewBalanceOverride" Header="New Balance Override" Click="OnMenuClick"/>
                                <MenuItem Tag="BalanceSheet_Activate" Click="OnMenuClick" Header="Activate Transaction"/>
                                <MenuItem Tag="BalanceSheet_Deactivate" Click="OnMenuClick" Header="Deactivate Transaction"/>
                                <MenuItem Tag="BalanceSheet_Delete" Click="OnMenuClick" Header="Delete Transaction"/>
                                <MenuItem Tag="BalanceSheet_ClearAmount" Click="OnMenuClick" Header="Clear Amount"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </DockPanel>
            </Border>
            <GridSplitter Width="5" HorizontalAlignment="Stretch" Grid.Column="3" Background="{DynamicResource Background}"/>
            <Border Grid.Column="4" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                <DockPanel>
                    <Label DockPanel.Dock="Top" Background="{DynamicResource CloseButtonBackgroundPressed}" Foreground="{DynamicResource Foreground}">Recurring Transactions</Label>
                    <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal">
                        <Label VerticalContentAlignment="Center" HorizontalAlignment="Left" Foreground="{DynamicResource Foreground}">Forecast recurring transactions</Label>
                        <local:NumericUpDown x:Name="NumericUpDown_DaysToForecast" Width="75" DecimalPlaces="0" HorizontalAlignment="Left" ValueChanged="NumericUpDown_ValueChanged" VerticalContentAlignment="Center"/>
                        <Label VerticalContentAlignment="Center" HorizontalAlignment="Left" Foreground="{DynamicResource Foreground}">days into the future.</Label>
                    </StackPanel>
                    <DataGrid Name="dataGrid_Templates" ItemsSource="{Binding ElementName=dataGrid_Accounts, Path=SelectedItem.RecurringChargeTemplates, Mode=OneWay}" Foreground="{DynamicResource Foreground}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" IsReadOnly="False" SelectionMode="Extended" SelectionUnit="FullRow" CellEditEnding="DataGrid_Templates_CellEditEnding" BorderBrush="{x:Null}" VerticalContentAlignment="Stretch" SelectionChanged="DataGrid_Templates_SelectionChanged" BorderThickness="0,0,0,0" HeadersVisibility="Column" GridLinesVisibility="All">
                        <DataGrid.CellStyle>
                            <Style TargetType="{x:Type DataGridCell}">
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}"/>
                                        <Setter Property="Foreground" Value="{x:Static SystemColors.HighlightTextBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.CellStyle>
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Name}" Header="Name"/>
                            <DataGridTemplateColumn Header="Start Date" SortMemberPath="Date">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Date, Converter={StaticResource DateConverter}}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.CellEditingTemplate>
                                    <DataTemplate>
                                        <DatePicker SelectedDate="{Binding Date}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellEditingTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding Interval}" Header="Interval"/>
                            <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource GetEnumValues_RecurrenceInterval}}" SelectedValueBinding="{Binding RecurrenceInterval}" Header=""/>
                            <DataGridTextColumn Binding="{Binding PredefinedAmount, StringFormat={}{0:C2}}" Header="Amount">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="HorizontalAlignment" Value="Right"/>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Width="*" IsReadOnly="True" CanUserSort="False"></DataGridTextColumn>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Tag="RecurringTransactions_New" Click="OnMenuClick" Header="New Recurring Transaction"/>
                                <MenuItem Tag="RecurringTransactions_Delete" Click="OnMenuClick" Header="Delete Recurring Transaction"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </DockPanel>
            </Border>
        </Grid>
        <StatusBar Grid.Row="2" Background="{DynamicResource Background}">
            <StatusBarItem HorizontalAlignment="Right" Padding="5">
                <StackPanel Orientation="Horizontal" Margin="0">
                    <Slider MinWidth="150" x:Name="m_Slider_Name" Minimum="0" Maximum="2" Value="1" ToolTip="Zoom Factor" TickPlacement="BottomRight" TickFrequency="1" Interval="1" SmallChange="0.1" LargeChange="0.25">
                        <Slider.Style>
                            <Style TargetType="{x:Type Slider}">
                                <Setter Property="Background" Value="{DynamicResource Background}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="{x:Null}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource CloseButtonBackgroundPressed}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Slider.Style>
                    </Slider>
                    <Label Foreground="{DynamicResource Foreground}" Content="{Binding ElementName=m_Slider_Name, Path=Value, Converter={StaticResource ZoomConverter}}" ContentStringFormat="Zoom {0:P0}" MinWidth="75" Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" MouseUp="Label_MouseUp" ToolTip="Reset Zoom">
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Setter Property="Background" Value="{DynamicResource Background}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="{x:Null}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource CloseButtonBackgroundPressed}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>                                        
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                    <Separator/>
                    <ToggleButton Name="toggleButton_DarkMode" Style="{StaticResource ToggleButtonStyle}" IsChecked="False" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
 